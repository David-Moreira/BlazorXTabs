@using Configuration
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<div class="xtabs card @CssClass">
    <div class="xtabs-header card-header">
        <ul class="xtabs-header-tabs nav nav-tabs card-header-tabs">
            @foreach (var tab in TabContent)
            {
                <li class="xtabs-item nav-item">
                    @if (CloseTabs)
                    {
                        <button type="button" @onclick="()=> CloseTab(tab)" class="xtabs-close close" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    }
                    <a class='xtabs-link nav-link @(IsActive(tab) ? "active" : "")' @onclick="() => { if (!IsTabHeaderDisabled) { SetActive(tab);} }">
                        <h6 class="m-0 font-weight-bold text-primary">@tab.Title</h6>
                    </a>
                </li>

            }
        </ul>
    </div>
    @{
        <div class="xtabs-content tab-content">
            @if (RenderMode == RenderMode.Full)
            {
                @foreach (var tab in TabContent)
                {
                    <div class='xtabs-tab-content card-body tab-pane fade @tab.CssClass @(IsActive(tab) ? "show active" : "")'>
                        @tab.ChildContent
                    </div>
                }
            }
            else
            {
                @foreach (var tab in TabContent)
                {
                    @if (IsActive(tab))
                    {
                        <div class="xtabs-tab-content card-body tab-pane fade @tab.CssClass show active">
                            @tab.ChildContent
                        </div>
                    }
                    else if (tab.InactiveRender)
                    {
                        <div class="xtabs-tab-content card-body tab-pane fade @tab.CssClass">
                            @tab.ChildContent
                        </div>
                    }
                }
            }

            @if (RenderMode == RenderMode.Steps)
            {
                <div class="d-flex justify-content-center mb-1">
                    @if (PreviousStepsContent is object)
                    {
                        @PreviousStepsContent(new PreviousStepsContext(EventCallback.Factory.Create(this, this.PreviousTab), IsPreviousDisabled));
                    }
                    else
                    {
                        <button type="button" class="btn btn-info mr-1" disabled="@IsPreviousDisabled" @onclick="PreviousTab">Previous</button>
                    }
                    @if (NextStepsContent is object)
                    {
                        @NextStepsContent(new NextStepsContext(EventCallback.Factory.Create(this, this.NextTab), IsNextDisabled));
                    }
                    else
                    {
                        <button type="button" class="btn btn-success" disabled="@(IsNextDisabled)" @onclick="NextTab">Next</button>
                    }
                </div>
            }
        </div>
    }
</div>